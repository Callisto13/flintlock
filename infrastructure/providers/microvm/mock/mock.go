// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weaveworks/reignite/core/ports (interfaces: MicroVMProvider)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/weaveworks/reignite/core/models"
)

// MockMicroVMProvider is a mock of MicroVMProvider interface.
type MockMicroVMProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMicroVMProviderMockRecorder
}

// MockMicroVMProviderMockRecorder is the mock recorder for MockMicroVMProvider.
type MockMicroVMProviderMockRecorder struct {
	mock *MockMicroVMProvider
}

// NewMockMicroVMProvider creates a new mock instance.
func NewMockMicroVMProvider(ctrl *gomock.Controller) *MockMicroVMProvider {
	mock := &MockMicroVMProvider{ctrl: ctrl}
	mock.recorder = &MockMicroVMProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMicroVMProvider) EXPECT() *MockMicroVMProviderMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockMicroVMProvider) Capabilities() models.Capabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(models.Capabilities)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockMicroVMProviderMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockMicroVMProvider)(nil).Capabilities))
}

// CreateVM mocks base method.
func (m *MockMicroVMProvider) CreateVM(arg0 context.Context, arg1 *models.MicroVM) (*models.MicroVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVM", arg0, arg1)
	ret0, _ := ret[0].(*models.MicroVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockMicroVMProviderMockRecorder) CreateVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockMicroVMProvider)(nil).CreateVM), arg0, arg1)
}

// DeleteVM mocks base method.
func (m *MockMicroVMProvider) DeleteVM(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVM", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVM indicates an expected call of DeleteVM.
func (mr *MockMicroVMProviderMockRecorder) DeleteVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockMicroVMProvider)(nil).DeleteVM), arg0, arg1)
}

// ListVMs mocks base method.
func (m *MockMicroVMProvider) ListVMs(arg0 context.Context, arg1 int) ([]*models.MicroVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVMs", arg0, arg1)
	ret0, _ := ret[0].([]*models.MicroVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMs indicates an expected call of ListVMs.
func (mr *MockMicroVMProviderMockRecorder) ListVMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMs", reflect.TypeOf((*MockMicroVMProvider)(nil).ListVMs), arg0, arg1)
}

// PauseVM mocks base method.
func (m *MockMicroVMProvider) PauseVM(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseVM", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseVM indicates an expected call of PauseVM.
func (mr *MockMicroVMProviderMockRecorder) PauseVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseVM", reflect.TypeOf((*MockMicroVMProvider)(nil).PauseVM), arg0, arg1)
}

// ResumeVM mocks base method.
func (m *MockMicroVMProvider) ResumeVM(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeVM", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeVM indicates an expected call of ResumeVM.
func (mr *MockMicroVMProviderMockRecorder) ResumeVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeVM", reflect.TypeOf((*MockMicroVMProvider)(nil).ResumeVM), arg0, arg1)
}

// StartVM mocks base method.
func (m *MockMicroVMProvider) StartVM(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVM", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartVM indicates an expected call of StartVM.
func (mr *MockMicroVMProviderMockRecorder) StartVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVM", reflect.TypeOf((*MockMicroVMProvider)(nil).StartVM), arg0, arg1)
}

// StopVM mocks base method.
func (m *MockMicroVMProvider) StopVM(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVM", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopVM indicates an expected call of StopVM.
func (mr *MockMicroVMProviderMockRecorder) StopVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVM", reflect.TypeOf((*MockMicroVMProvider)(nil).StopVM), arg0, arg1)
}
