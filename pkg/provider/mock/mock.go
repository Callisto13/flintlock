// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weaveworks/reignite/pkg/provider (interfaces: MicrovmProvider)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	provider "github.com/weaveworks/reignite/pkg/provider"
)

// MockMicrovmProvider is a mock of MicrovmProvider interface.
type MockMicrovmProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMicrovmProviderMockRecorder
}

// MockMicrovmProviderMockRecorder is the mock recorder for MockMicrovmProvider.
type MockMicrovmProviderMockRecorder struct {
	mock *MockMicrovmProvider
}

// NewMockMicrovmProvider creates a new mock instance.
func NewMockMicrovmProvider(ctrl *gomock.Controller) *MockMicrovmProvider {
	mock := &MockMicrovmProvider{ctrl: ctrl}
	mock.recorder = &MockMicrovmProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMicrovmProvider) EXPECT() *MockMicrovmProviderMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockMicrovmProvider) Capabilities() provider.Capabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(provider.Capabilities)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockMicrovmProviderMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockMicrovmProvider)(nil).Capabilities))
}

// CreateVM mocks base method.
func (m *MockMicrovmProvider) CreateVM(arg0 context.Context, arg1 *provider.CreateVMInput) (*provider.CreateVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVM", arg0, arg1)
	ret0, _ := ret[0].(*provider.CreateVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockMicrovmProviderMockRecorder) CreateVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockMicrovmProvider)(nil).CreateVM), arg0, arg1)
}

// DeleteVM mocks base method.
func (m *MockMicrovmProvider) DeleteVM(arg0 context.Context, arg1 *provider.DeleteVMInput) (*provider.DeleteVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVM", arg0, arg1)
	ret0, _ := ret[0].(*provider.DeleteVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVM indicates an expected call of DeleteVM.
func (mr *MockMicrovmProviderMockRecorder) DeleteVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockMicrovmProvider)(nil).DeleteVM), arg0, arg1)
}

// ListVMs mocks base method.
func (m *MockMicrovmProvider) ListVMs(arg0 context.Context, arg1 *provider.ListVMsInput) (*provider.ListVMsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVMs", arg0, arg1)
	ret0, _ := ret[0].(*provider.ListVMsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMs indicates an expected call of ListVMs.
func (mr *MockMicrovmProviderMockRecorder) ListVMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMs", reflect.TypeOf((*MockMicrovmProvider)(nil).ListVMs), arg0, arg1)
}

// Name mocks base method.
func (m *MockMicrovmProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockMicrovmProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockMicrovmProvider)(nil).Name))
}

// PauseVM mocks base method.
func (m *MockMicrovmProvider) PauseVM(arg0 context.CancelFunc, arg1 *provider.PauseVMInput) (*provider.PauseVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseVM", arg0, arg1)
	ret0, _ := ret[0].(*provider.PauseVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseVM indicates an expected call of PauseVM.
func (mr *MockMicrovmProviderMockRecorder) PauseVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseVM", reflect.TypeOf((*MockMicrovmProvider)(nil).PauseVM), arg0, arg1)
}

// ResumeVM mocks base method.
func (m *MockMicrovmProvider) ResumeVM(arg0 context.Context, arg1 *provider.ResumeVMInput) (*provider.ResumeVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeVM", arg0, arg1)
	ret0, _ := ret[0].(*provider.ResumeVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeVM indicates an expected call of ResumeVM.
func (mr *MockMicrovmProviderMockRecorder) ResumeVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeVM", reflect.TypeOf((*MockMicrovmProvider)(nil).ResumeVM), arg0, arg1)
}

// StartVM mocks base method.
func (m *MockMicrovmProvider) StartVM(arg0 context.Context, arg1 *provider.StartVMInput) (*provider.StartVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVM", arg0, arg1)
	ret0, _ := ret[0].(*provider.StartVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVM indicates an expected call of StartVM.
func (mr *MockMicrovmProviderMockRecorder) StartVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVM", reflect.TypeOf((*MockMicrovmProvider)(nil).StartVM), arg0, arg1)
}

// StopVM mocks base method.
func (m *MockMicrovmProvider) StopVM(arg0 context.Context, arg1 *provider.StopVMInput) (*provider.StopVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVM", arg0, arg1)
	ret0, _ := ret[0].(*provider.StopVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopVM indicates an expected call of StopVM.
func (mr *MockMicrovmProviderMockRecorder) StopVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVM", reflect.TypeOf((*MockMicrovmProvider)(nil).StopVM), arg0, arg1)
}
