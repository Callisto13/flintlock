// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weaveworks/reignite/pkg/microvm (interfaces: Provider)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	microvm "github.com/weaveworks/reignite/pkg/microvm"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockProvider) Capabilities() microvm.Capabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(microvm.Capabilities)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockProviderMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockProvider)(nil).Capabilities))
}

// CreateVM mocks base method.
func (m *MockProvider) CreateVM(arg0 context.Context, arg1 *microvm.CreateVMInput) (*microvm.CreateVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVM", arg0, arg1)
	ret0, _ := ret[0].(*microvm.CreateVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockProviderMockRecorder) CreateVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockProvider)(nil).CreateVM), arg0, arg1)
}

// DeleteVM mocks base method.
func (m *MockProvider) DeleteVM(arg0 context.Context, arg1 *microvm.DeleteVMInput) (*microvm.DeleteVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVM", arg0, arg1)
	ret0, _ := ret[0].(*microvm.DeleteVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVM indicates an expected call of DeleteVM.
func (mr *MockProviderMockRecorder) DeleteVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockProvider)(nil).DeleteVM), arg0, arg1)
}

// ListVMs mocks base method.
func (m *MockProvider) ListVMs(arg0 context.Context, arg1 *microvm.ListVMsInput) (*microvm.ListVMsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVMs", arg0, arg1)
	ret0, _ := ret[0].(*microvm.ListVMsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMs indicates an expected call of ListVMs.
func (mr *MockProviderMockRecorder) ListVMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMs", reflect.TypeOf((*MockProvider)(nil).ListVMs), arg0, arg1)
}

// PauseVM mocks base method.
func (m *MockProvider) PauseVM(arg0 context.CancelFunc, arg1 *microvm.PauseVMInput) (*microvm.PauseVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseVM", arg0, arg1)
	ret0, _ := ret[0].(*microvm.PauseVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseVM indicates an expected call of PauseVM.
func (mr *MockProviderMockRecorder) PauseVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseVM", reflect.TypeOf((*MockProvider)(nil).PauseVM), arg0, arg1)
}

// ResumeVM mocks base method.
func (m *MockProvider) ResumeVM(arg0 context.Context, arg1 *microvm.ResumeVMInput) (*microvm.ResumeVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeVM", arg0, arg1)
	ret0, _ := ret[0].(*microvm.ResumeVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeVM indicates an expected call of ResumeVM.
func (mr *MockProviderMockRecorder) ResumeVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeVM", reflect.TypeOf((*MockProvider)(nil).ResumeVM), arg0, arg1)
}

// StartVM mocks base method.
func (m *MockProvider) StartVM(arg0 context.Context, arg1 *microvm.StartVMInput) (*microvm.StartVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVM", arg0, arg1)
	ret0, _ := ret[0].(*microvm.StartVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartVM indicates an expected call of StartVM.
func (mr *MockProviderMockRecorder) StartVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVM", reflect.TypeOf((*MockProvider)(nil).StartVM), arg0, arg1)
}

// StopVM mocks base method.
func (m *MockProvider) StopVM(arg0 context.Context, arg1 *microvm.StopVMInput) (*microvm.StopVMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVM", arg0, arg1)
	ret0, _ := ret[0].(*microvm.StopVMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopVM indicates an expected call of StopVM.
func (mr *MockProviderMockRecorder) StopVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVM", reflect.TypeOf((*MockProvider)(nil).StopVM), arg0, arg1)
}
